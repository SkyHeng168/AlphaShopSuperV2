@model AlphaShop.Models.PurchaseOrder
@{
    ViewData["Title"] = "Order Details";
}

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-controller="PurchaseOrder" asp-action="Index">Purchase Orders</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Order #@Model.OrderNumber</li>
                </ol>
            </nav>
            <div class="d-flex justify-content-between align-items-center">
                <h2 class="mb-0">Order Details</h2>
                <div>
                    <span class="badge @GetOrderStatusBadgeClass(Model.OrderStatus) fs-6">@Model.OrderStatus</span>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8">
            <div class="card mb-4">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">Order Items</h5>
                    <span class="text-muted">Total Items: @Model.OrderItemSuppliers.Count</span>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th>Product</th>
                                    <th class="text-end">Ordered</th>
                                    <th class="text-end">Received</th>
                                    <th class="text-end">Unit Price</th>
                                    <th class="text-end">Line Total</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.OrderItemSuppliers)
                                {
                                    <tr>
                                        <td>@item.Product?.ProductName</td>
                                        <td class="text-end">@item.Quantity</td>
                                        <td class="text-end">@item.RecievedQuantity</td>
                                        <td class="text-end">@item.UnitPrice.ToString("C")</td>
                                        <td class="text-end">@((item.Quantity * item.UnitPrice).ToString("C"))</td>
                                        <td>
                                            <span class="badge @GetItemStatusBadgeClass(item.StatusOrderItemSupplier)">
                                                @item.StatusOrderItemSupplier
                                            </span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot class="table-light">
                                <tr>
                                    <th colspan="4" class="text-end">Subtotal</th>
                                    <th class="text-end">@Model.TotalAmount.ToString("C")</th>
                                    <th></th>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(Model.Note))
            {
                <div class="card mb-4">
                    <div class="card-header bg-light">
                        <h5 class="card-title mb-0">Order Notes</h5>
                    </div>
                    <div class="card-body">
                        <p class="mb-0">@Model.Note</p>
                    </div>
                </div>
            }
        </div>

        <div class="col-lg-4">
            <div class="card mb-4">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0">Order Summary</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <h6 class="text-muted">Supplier Information</h6>
                        <p class="mb-1"><strong>@Model.Supplier?.ContactPerson</strong></p>
                        <p class="mb-1">@Model.Supplier?.ContactPerson</p>
                        <p class="mb-1">@Model.Supplier?.Email</p>
                        <p class="mb-1">@Model.Supplier?.Phone</p>
                    </div>

                    <hr>

                    <div class="mb-3">
                        <h6 class="text-muted">Order Information</h6>
                        <dl class="row mb-0">
                            <dt class="col-sm-5">Order Number</dt>
                            <dd class="col-sm-7">@Model.OrderNumber</dd>

                            <dt class="col-sm-5">Order Date</dt>
                            <dd class="col-sm-7">@Model.OrderDate.ToString("d MMM yyyy")</dd>

                            <dt class="col-sm-5">Expected Date</dt>
                            <dd class="col-sm-7">@Model.ExpectedDate.ToString("d MMM yyyy")</dd>

                            <dt class="col-sm-5">Order Status</dt>
                            <dd class="col-sm-7">
                                <span class="badge @GetOrderStatusBadgeClass(Model.OrderStatus)">
                                    @Model.OrderStatus
                                </span>
                            </dd>
                        </dl>
                    </div>

                    <hr>

                    <div class="mb-3">
                        <h6 class="text-muted">System Information</h6>
                        <dl class="row mb-0">
                            <dt class="col-sm-5">Created</dt>
                            <dd class="col-sm-7">@Model.CreatedAt.ToString("d MMM yyyy HH:mm")</dd>

                            <dt class="col-sm-5">Last Updated</dt>
                            <dd class="col-sm-7">@(Model.UpdatedAt?.ToString("d MMM yyyy HH:mm") ?? "Never")</dd>
                        </dl>
                    </div>
                </div>
            </div>

            <div class="d-grid gap-2">
                <a asp-controller="PurchaseOrder" asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary">
                    <i class="fas fa-edit me-2"></i>Edit Order
                </a>
                <a href="#" class="btn btn-outline-secondary">
                    <i class="fas fa-file-pdf me-2"></i>Export PDF
                </a>

                @if (Model.OrderStatus != Status.Cancelled)
                {
                    <button type="button" class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#cancelOrderModal">
                        <i class="fas fa-ban me-2"></i>Cancel Order
                    </button>
                }
            </div>
        </div>
    </div>
</div>

<!-- Cancel Order Modal -->
<div class="modal fade" id="cancelOrderModal" tabindex="-1" aria-labelledby="cancelOrderModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cancelOrderModalLabel">Confirm Order Cancellation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to cancel this order? This action cannot be undone.</p>
                <p class="fw-bold">Order #@Model.OrderNumber</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <form asp-controller="PurchaseOrder" asp-action="CancelPurchaseOrder" asp-route-id="@Model.Id" method="post">
                    <button type="submit" class="btn btn-danger">Confirm Cancellation</button>
                </form>
            </div>
        </div>
    </div>
</div>
@functions {
    string GetOrderStatusBadgeClass(Status status)
    {
        return status switch
        {
            Status.Draft => "bg-warning text-dark",
            Status.Approved => "bg-info",
            Status.Received => "bg-success",
            Status.Cancelled => "bg-danger",
            Status.Shipped => "bg-primary",
            _ => "bg-secondary"
        };
    }

    string GetItemStatusBadgeClass(StatusOrderItemSupplier status)
    {
        return status switch
        {
            StatusOrderItemSupplier.Pending => "bg-warning text-dark",
            StatusOrderItemSupplier.Recieved => "bg-success",
            StatusOrderItemSupplier.Canceled => "bg-danger",
            StatusOrderItemSupplier.Returned => "bg-info",
            StatusOrderItemSupplier.Backorder => "bg-primary",
            _ => "bg-secondary"
        };
    }
}
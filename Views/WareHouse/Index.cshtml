@model IEnumerable<AlphaShop.Models.WareHouse>
@{
    ViewData["Title"] = "Warehouse Management";
}

<div class="container-fluid px-0 px-md-3">
    <!-- Page Header with Gradient Background -->
    <div class="d-flex flex-wrap justify-content-between align-items-center mb-4 py-3 px-4 bg-gradient-primary rounded-3">
        <div>
            <h1 class="h3 mb-0 text-white">
                <i class="fas fa-warehouse me-2"></i>@ViewData["Title"]
            </h1>
            <nav aria-label="breadcrumb" class="mt-2">
                <ol class="breadcrumb breadcrumb-light">
                    <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index" class="text-decoration-none text-white-50"><i class="fas fa-home me-1"></i> Dashboard</a></li>
                    <li class="breadcrumb-item active text-white" aria-current="page">Warehouses</li>
                </ol>
            </nav>
        </div>
        <div>
            <div class="d-flex flex-column flex-sm-row gap-2 w-100 w-md-auto">
                <button id="exportPdf" class="btn btn-light d-flex align-items-center justify-content-center gap-2 flex-grow-1 flex-md-grow-0">
                    <i class="fas fa-file-pdf"></i>
                    <span class="d-none d-sm-inline">Export PDF</span>
                </button>
                <a asp-controller="WareHouse" asp-action="CreateWareHouse" class="btn btn-success d-flex align-items-center justify-content-center gap-2 flex-grow-1 flex-md-grow-0">
                    <i class="fas fa-plus"></i>
                    <span class="d-none d-sm-inline">New Warehouse</span>
                </a>
            </div>
        </div>
    </div>

    <!-- Warehouse Cards Summary -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card border-start border-primary border-3 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-uppercase text-muted mb-0">Total Warehouses</h6>
                            <h3 class="mb-0">@Model.Count()</h3>
                        </div>
                        <div class="icon icon-shape bg-primary text-white rounded-circle">
                            <i class="fas fa-warehouse"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-start border-info border-3 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-uppercase text-muted mb-0">Active</h6>
                            <h3 class="mb-0">@Model.Count()</h3>
                        </div>
                        <div class="icon icon-shape bg-info text-white rounded-circle">
                            <i class="fas fa-check-circle"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-start border-success border-3 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-uppercase text-muted mb-0">Total Products</h6>
                            <h3 class="mb-0">@Model.Sum(w => w.Products.Count)</h3>
                        </div>
                        <div class="icon icon-shape bg-success text-white rounded-circle">
                            <i class="fas fa-boxes"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-start border-warning border-3 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-uppercase text-muted mb-0">Recently Added</h6>
                            <h3 class="mb-0">@Model.Count()</h3>
                        </div>
                        <div class="icon icon-shape bg-warning text-white rounded-circle">
                            <i class="fas fa-clock"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Card -->
    <div class="card shadow-sm">
        <div class="card-header bg-white py-3 d-flex flex-column flex-md-row justify-content-between align-items-center">
            <h5 class="mb-0">Warehouse List</h5>
            <div class="d-flex mt-2 mt-md-0">
                <div class="input-group input-group-sm me-2" style="width: 200px;">
                    <span class="input-group-text bg-transparent"><i class="fas fa-filter"></i></span>
                    <select class="form-select" id="statusFilter">
                        <option value="">All Status</option>
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                    </select>
                </div>
                <div class="input-group input-group-sm" style="width: 180px;">
                    <input type="text" class="form-control" placeholder="Search..." id="searchInput">
                    <button class="btn btn-outline-secondary" type="button"><i class="fas fa-search"></i></button>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive @(Model.Count() > 3 ? "scrollable-table" : "")">
                <table class="table table-hover table-striped mb-0" id="warehouseTable">
                    <thead class="table-light">
                        <tr>
                            <th class="ps-4">#</th>
                            <th>Code</th>
                            <th>Warehouse Name</th>
                            <th>Location</th>
                            <th>Contact</th>
                            <th>Products</th>
                            <th class="text-end pe-4">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="warehouseTableBody">
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td class="ps-4">@(Model.ToList().IndexOf(item) + 1)</td>
                                <td>
                                    <span class="badge bg-primary">@item.WareHouseCode</span>
                                </td>
                                <td>@item.WareHouseName</td>
                                <td>@item.WareHouseLocation</td>
                                <td>@item.WareHousePhone</td>
                                <td>
                                    <span class="badge bg-info">@item.Products.Count</span>
                                </td>
                                <td class="text-end pe-4">
                                    <div class="btn-group btn-group-sm" role="group">
                                        <a asp-action="DetailWareHouse" asp-route-id="@item.Id" class="btn btn-outline-primary">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <a asp-controller="WareHouse" asp-action="EditWareHouse" asp-route-id="@item.Id" class="btn btn-outline-secondary">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button data-bs-toggle="modal"
                                                data-bs-target="#deleteModal-@item.Id"
                                                class="btn btn-outline-danger" title="Delete">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </div>
                                    <!-- Delete Modal -->
                                    <div class="modal fade" id="deleteModal-@item.Id" tabindex="-1">
                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <div class="modal-header bg-danger text-white">
                                                    <h5 class="modal-title">Confirm Deletion</h5>
                                                    <button type="button" class="btn-close btn-close-white"
                                                            data-bs-dismiss="modal"></button>
                                                </div>
                                                <div class="modal-body">
                                                    <p>Are you sure you want to delete warehouse <strong>@item.WareHouseName</strong>?</p>
                                                    <p class="text-danger small mb-0">
                                                        <i class="fas fa-exclamation-circle me-1"></i>This will also remove all associated products.
                                                    </p>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary"
                                                            data-bs-dismiss="modal">
                                                        Cancel
                                                    </button>
                                                    <form asp-controller="WareHouse" asp-action="DeleteWareHouse" asp-route-id="@item.Id" method="post">
                                                        <input type="hidden" name="id" value="@item.Id" />
                                                        <button type="submit" class="btn btn-danger">
                                                            <i class="fas fa-trash-alt me-1"></i>Delete
                                                        </button>
                                                    </form>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                        @if (!Model.Any())
                        {
                            <tr>
                                <td colspan="7" class="text-center py-5">
                                    <div class="empty-state">
                                        <i class="fas fa-warehouse me-2"></i>
                                        <h5>No Warehouses found</h5>
                                        <p>Click the "New Warehouse" button to create one</p>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="card-footer bg-white py-3">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-center">
                <div class="mb-2 mb-md-0" id="paginationInfo">
                    Showing <strong>1</strong> to <strong id="toCount">@(Model.Count() > 0 ? Model.Count() : 0)</strong> of <strong id="totalCount">@Model.Count()</strong> entries
                </div>
                <nav>
                    <ul class="pagination mb-0" id="paginationControls">
                        <li class="page-item disabled" id="prevPage">
                            <a class="page-link" href="#" tabindex="-1">Previous</a>
                        </li>
                        <li class="page-item active"><a class="page-link" href="#" data-page="1">1</a></li>
                        <li class="page-item" id="nextPage">
                            <a class="page-link" href="#" data-page="2">Next</a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .bg-gradient-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        }

        .icon-shape {
            width: 3rem;
            height: 3rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .table th {
            text-transform: uppercase;
            font-size: 0.75rem;
            letter-spacing: 0.5px;
        }

        .badge {
            font-weight: 500;
            padding: 0.35em 0.65em;
        }

        .scrollable-table {
            max-height: 400px;
            overflow-y: auto;
            display: block;
        }

        .table-responsive {
            position: relative;
        }

        .table thead {
            position: sticky;
            top: 0;
            background-color: #f8f9fa;
            z-index: 10;
        }

        .empty-state {
            color: #6c757d;
        }

            .empty-state i {
                font-size: 2rem;
                margin-bottom: 1rem;
                color: #adb5bd;
            }

        .page-item.disabled .page-link {
            color: #6c757d;
            pointer-events: none;
            background-color: #fff;
            border-color: #dee2e6;
        }

        .page-item.active .page-link {
            z-index: 3;
            color: #fff;
            background-color: #0d6efd;
            border-color: #0d6efd;
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Pagination variables
            const rowsPerPage = 10;
            const allRows = $('#warehouseTableBody tr');
            const totalRows = allRows.length;
            const totalPages = Math.ceil(totalRows / rowsPerPage);
            let currentPage = 1;

            // Initialize pagination
            function initPagination() {
                if (totalRows <= rowsPerPage) {
                    $('#paginationControls').hide();
                    return;
                }

                // Update pagination info
                updatePaginationInfo();

                // Generate page numbers
                generatePageNumbers();

                // Show first page
                showPage(1);
            }

            // Update pagination information
            function updatePaginationInfo() {
                const start = ((currentPage - 1) * rowsPerPage) + 1;
                let end = currentPage * rowsPerPage;
                if (end > totalRows) end = totalRows;

                $('#paginationInfo').html(`
                    Showing <strong>${start}</strong> to <strong>${end}</strong> of <strong>${totalRows}</strong> entries
                `);
            }

            // Generate page numbers
            function generatePageNumbers() {
                const pagination = $('#paginationControls');
                pagination.empty();

                // Previous button
                pagination.append(`
                    <li class="page-item disabled" id="prevPage">
                        <a class="page-link" href="#" tabindex="-1">Previous</a>
                    </li>
                `);

                // Page numbers
                const maxVisiblePages = 5;
                let startPage = 1;
                let endPage = totalPages;

                if (totalPages > maxVisiblePages) {
                    const maxPagesBeforeCurrent = Math.floor(maxVisiblePages / 2);
                    const maxPagesAfterCurrent = Math.ceil(maxVisiblePages / 2) - 1;

                    if (currentPage <= maxPagesBeforeCurrent) {
                        startPage = 1;
                        endPage = maxVisiblePages;
                    } else if (currentPage + maxPagesAfterCurrent >= totalPages) {
                        startPage = totalPages - maxVisiblePages + 1;
                        endPage = totalPages;
                    } else {
                        startPage = currentPage - maxPagesBeforeCurrent;
                        endPage = currentPage + maxPagesAfterCurrent;
                    }
                }

                // First page and ellipsis
                if (startPage > 1) {
                    pagination.append(`
                        <li class="page-item">
                            <a class="page-link" href="#" data-page="1">1</a>
                        </li>
                    `);
                    if (startPage > 2) {
                        pagination.append(`
                            <li class="page-item disabled">
                                <a class="page-link" href="#">...</a>
                            </li>
                        `);
                    }
                }

                // Visible pages
                for (let i = startPage; i <= endPage; i++) {
                    const active = i === currentPage ? 'active' : '';
                    pagination.append(`
                        <li class="page-item ${active}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>
                    `);
                }

                // Last page and ellipsis
                if (endPage < totalPages) {
                    if (endPage < totalPages - 1) {
                        pagination.append(`
                            <li class="page-item disabled">
                                <a class="page-link" href="#">...</a>
                            </li>
                        `);
                    }
                    pagination.append(`
                        <li class="page-item">
                            <a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a>
                        </li>
                    `);
                }

                // Next button
                pagination.append(`
                    <li class="page-item" id="nextPage">
                        <a class="page-link" href="#" data-page="${currentPage + 1}">Next</a>
                    </li>
                `);

                // Disable previous/next buttons when appropriate
                if (currentPage === 1) {
                    $('#prevPage').addClass('disabled');
                } else {
                    $('#prevPage').removeClass('disabled');
                }

                if (currentPage === totalPages) {
                    $('#nextPage').addClass('disabled');
                } else {
                    $('#nextPage').removeClass('disabled');
                }
            }

            // Show specific page
            function showPage(page) {
                currentPage = page;
                const start = (page - 1) * rowsPerPage;
                const end = start + rowsPerPage;

                allRows.hide();
                allRows.slice(start, end).show();

                updatePaginationInfo();
                generatePageNumbers();
            }

            // Pagination click handler
            $(document).on('click', '.page-link', function(e) {
                e.preventDefault();
                const page = $(this).data('page');
                const isPrev = $(this).parent().attr('id') === 'prevPage';
                const isNext = $(this).parent().attr('id') === 'nextPage';

                if (isPrev && currentPage > 1) {
                    showPage(currentPage - 1);
                } else if (isNext && currentPage < totalPages) {
                    showPage(currentPage + 1);
                } else if (page) {
                    showPage(page);
                }
            });

            // Search functionality
            $('#searchInput').on('keyup', function() {
                const value = $(this).val().toLowerCase();
                const filteredRows = allRows.filter(function() {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
                    return $(this).text().toLowerCase().indexOf(value) > -1;
                });

                // Reset pagination with filtered rows
                handleSearchFilter(filteredRows);
            });

            // Handle search filtering and pagination
            function handleSearchFilter(filteredRows) {
                const filteredCount = filteredRows.length;
                const filteredPages = Math.ceil(filteredCount / rowsPerPage);

                if (filteredCount === 0) {
                    $('#warehouseTableBody').html(`
                        <tr>
                            <td colspan="7" class="text-center py-5">
                                <div class="empty-state">
                                    <i class="fas fa-search me-2"></i>
                                    <h5>No matching warehouses found</h5>
                                    <p>Try a different search term</p>
                                </div>
                            </td>
                        </tr>
                    `);
                    $('#paginationControls').hide();
                    $('#paginationInfo').html(`
                        Showing <strong>0</strong> to <strong>0</strong> of <strong>0</strong> entries
                    `);
                } else {
                    if (filteredCount > rowsPerPage) {
                        $('#paginationControls').show();
                        showPage(1);
                    } else {
                        $('#paginationControls').hide();
                        allRows.hide();
                        filteredRows.show();
                        $('#paginationInfo').html(`
                            Showing <strong>1</strong> to <strong>${filteredCount}</strong> of <strong>${filteredCount}</strong> entries
                        `);
                    }
                }
            }

            // Status filter functionality
            $('#statusFilter').change(function() {
                const value = $(this).val().toLowerCase();
                if (value === "") {
                    allRows.show();
                    initPagination();
                } else {
                    const filteredRows = allRows.filter(function() {
                        // Add your status filtering logic here
                        // This is a placeholder - adjust based on your status field
                        const matches = $(this).find('td:nth-child(6)').text().toLowerCase().indexOf(value) > -1;
                        $(this).toggle(matches);
                        return matches;
                    });

                    handleSearchFilter(filteredRows);
                }
            });

            // Export PDF button
            $('#exportPdf').click(function() {
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();

                // Add title
                doc.setFontSize(18);
                doc.text('Warehouse Management Report', 14, 15);

                // Add date
                doc.setFontSize(10);
                doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 14, 22);

                // Add table
                doc.autoTable({
                    startY: 30,
                    head: [['#', 'Code', 'Name', 'Location', 'Contact', 'Products']],
                    body: Array.from(allRows).map(row => {
                        const cells = $(row).find('td');
                        return [
                            $(cells[0]).text(),
                            $(cells[1]).text().trim(),
                            $(cells[2]).text(),
                            $(cells[3]).text(),
                            $(cells[4]).text(),
                            $(cells[5]).text().trim()
                        ];
                    }),
                    theme: 'grid',
                    headStyles: {
                        fillColor: [102, 126, 234],
                        textColor: 255,
                        fontStyle: 'bold'
                    },
                    alternateRowStyles: {
                        fillColor: [245, 245, 245]
                    },
                    margin: { top: 30 }
                });

                // Save the PDF
                doc.save('WarehouseReport_@DateTime.Now.ToString("yyyyMMdd")');
            });

            // Initialize pagination on page load
            initPagination();
        });
    </script>
}